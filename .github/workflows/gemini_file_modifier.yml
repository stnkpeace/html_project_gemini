name: Gemini File Modifier

on:
  # Trigger on a push to a specific branch or a manual dispatch
  workflow_dispatch:
    inputs:
      file_path:
        description: 'Path to the file to modify (e.g., src/data.json)'
        required: true
        default: 'README.md'
      modification_prompt:
        description: 'The instruction for Gemini (e.g., "Summarize this file into five bullet points.")'
        required: true
        default: 'Explain this file in two sentences.'

jobs:
  modify_and_commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for committing changes
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Uses the PAT_TOKEN for read/write access (Git Auth Fix)
          token: ${{ secrets.PAT_TOKEN }}
          
      # Step 2: Read the file content and set as environment variable
      - name: Read File Content
        id: file_content
        run: |
          # Read file content, escape quotes, and set as multi-line environment variable
          FILE_CONTENT=$(cat ${{ github.event.inputs.file_path }} | sed 's/\"/\\\"/g')
          echo "file_content<<EOF" >> $GITHUB_ENV
          echo "$FILE_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      # Step 3: Construct the Full Prompt
      - name: Construct Prompt
        id: full_prompt
        run: |
          # The complete prompt includes the instruction and the file content
          FULL_PROMPT="${{ github.event.inputs.modification_prompt }}\n\nFile Content to Modify:\n\`\`\`\n${{ env.file_content }}\n\`\`\`\n\n- ONLY output the complete modified content for the file. DO NOT include any introductory or explanatory text or markdown fences."
          echo "full_prompt<<EOF" >> $GITHUB_ENV
          echo "$FULL_PROMPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 4: Install Gemini CLI
      # This step makes the 'gemini' executable available for the next step
      - name: Install Gemini CLI
        uses: google-github-actions/run-gemini-cli@main

      # Step 5: Call Gemini and Write to File (Robust Shell Method)
      - name: Generate New Content and Write to File
        id: generate_and_write
        # Pass the API key as an environment variable for the 'gemini' CLI to auto-detect
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_HTML_API_KEY }}
        run: |
          PROMPT_FILE="gemini_prompt.txt"
          OUTPUT_FILE="${{ github.event.inputs.file_path }}"

          # 1. Write the full prompt to a temporary file to avoid shell syntax errors
          echo "${{ env.full_prompt }}" > $PROMPT_FILE
          
          echo "Sending prompt to Gemini..."
          
          # 2. Execute the gemini CLI, reading the prompt from the file via pipe
          NEW_CONTENT=$(cat $PROMPT_FILE | gemini 2>&1)
          
          # 3. Basic Error Check
          if echo "$NEW_CONTENT" | grep -q "API call failed"; then
              echo "Gemini API failed to return content."
              echo "::error::Gemini API Call Failed: $NEW_CONTENT"
              exit 1
          fi
          
          # 4. Write the new content to the original file
          echo "Writing new content to $OUTPUT_FILE"
          echo "$NEW_CONTENT" > $OUTPUT_FILE
          
      # Step 6: Commit the changes
      - name: Commit and Push Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Gemini Auto-Update: ${{ github.event.inputs.file_path }} modified'
        # Pass the PAT_TOKEN as GITHUB_TOKEN environment variable (Correct authentication)
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}