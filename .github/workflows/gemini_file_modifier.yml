name: Gemini File Modifier

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: 'Path to the file to modify (e.g., src/data.json)'
        required: true
        default: 'README.md'
      modification_prompt:
        description: 'The instruction for Gemini (e.g., "Summarize this file into five bullet points.")'
        required: true
        default: 'Explain this file in two sentences.'

jobs:
  modify_and_commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for committing changes
    steps:
      # ... Steps 1, 2, 3 (Checkout, Read, Construct Prompt) remain the same ...
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          
      - name: Read File Content
        id: file_content
        run: |
          FILE_CONTENT=$(cat ${{ github.event.inputs.file_path }} | sed 's/\"/\\\"/g')
          echo "file_content<<EOF" >> $GITHUB_ENV
          echo "$FILE_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Construct Prompt
        id: full_prompt
        run: |
          FULL_PROMPT="${{ github.event.inputs.modification_prompt }}\n\nFile Content to Modify:\n\`\`\`\n${{ env.file_content }}\n\`\`\`\n\n- ONLY output the complete modified content for the file. DO NOT include any introductory or explanatory text or markdown fences."
          echo "full_prompt<<EOF" >> $GITHUB_ENV
          echo "$FULL_PROMPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 4: Call Gemini (Use action to install, but get output via ENV)
      - name: Generate New Content with Gemini
        uses: google-github-actions/run-gemini-cli@main
        id: gemini_response
        with:
          gemini_api_key: ${{ secrets.GEMINI_HTML_API_KEY }} 
          prompt: ${{ env.full_prompt }}
        # We DO NOT use 'output' here to avoid potential filtering issues.
        
      # Step 5: Write the new content to the file (New Capture Logic)
      - name: Write Modified Content
        id: write_content
        run: |
          # 1. Capture the LAST line of standard output from the previous step.
          #    This is a reliable way to get simple text output when 'output' fails.
          NEW_CONTENT=$(echo "${{ steps.gemini_response.outputs.stdout }}" | tail -n 1)
          OUTPUT_FILE="${{ github.event.inputs.file_path }}"

          echo "DEBUG: Captured Content Length: ${#NEW_CONTENT}"

          # Check if the output is empty
          if [[ -z "$NEW_CONTENT" ]]; then
              echo "Gemini returned empty content. Stopping to prevent file erasure."
              echo "::error::Gemini model returned empty content. Check the prompt or API status."
              exit 1
          fi
          
          # Write the new content to the original file
          echo "$NEW_CONTENT" | tee "$OUTPUT_FILE"
          
      # Step 6: Commit the changes
      - name: Commit and Push Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Gemini Auto-Update: ${{ github.event.inputs.file_path }} modified'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}