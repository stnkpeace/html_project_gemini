name: Gemini File Modifier

on:
  # Trigger on a push to a specific branch or a manual dispatch
  workflow_dispatch:
    inputs:
      file_path:
        description: 'Path to the file to modify (e.g., src/data.json)'
        required: true
        default: 'README.md'
      modification_prompt:
        description: 'The instruction for Gemini (e.g., "Summarize this file into five bullet points.")'
        required: true
        default: 'Explain this file in two sentences.'

jobs:
  modify_and_commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for committing changes
    steps:
      # Step 1: Checkout the repository (Uses PAT_TOKEN)
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          
      # Step 2: Read the file content
      - name: Read File Content
        id: file_content
        run: |
          FILE_CONTENT=$(cat ${{ github.event.inputs.file_path }} | sed 's/\"/\\\"/g')
          echo "file_content<<EOF" >> $GITHUB_ENV
          echo "$FILE_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      # Step 3: Construct the Full Prompt
      - name: Construct Prompt
        id: full_prompt
        run: |
          FULL_PROMPT="${{ github.event.inputs.modification_prompt }}\n\nFile Content to Modify:\n\`\`\`\n${{ env.file_content }}\n\`\`\`\n\n- ONLY output the complete modified content for the file. DO NOT include any introductory or explanatory text."
          echo "full_prompt<<EOF" >> $GITHUB_ENV
          echo "$FULL_PROMPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 4: Call Gemini API and get modified content
      - name: Generate New Content with Gemini
        # Using '@main' to bypass previous version tag errors
        uses: google-github-actions/run-gemini-cli@main
        id: gemini_response
        with:
          # CORRECTED to match your secret name
          gemini_api_key: ${{ secrets.GEMINI_HTML_API_KEY }} 
          prompt: ${{ env.full_prompt }}
          output: 'modified_content'
          
      # Step 5: Write the new content to the file
      - name: Write Modified Content
        run: |
          # Use raw output from Gemini to overwrite the file
          echo "${{ steps.gemini_response.outputs.modified_content }}" > ${{ github.event.inputs.file_path }}
          
      # Step 6: Commit the changes (Uses PAT_TOKEN)
      - name: Commit and Push Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Gemini Auto-Update: ${{ github.event.inputs.file_path }} modified'
          token: ${{ secrets.PAT_TOKEN }}